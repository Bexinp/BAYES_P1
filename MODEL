import numpy as np
import scipy as sp
import matplotlib.pyplot as plt

# We chose the subject : "Dugongs: nonlinear growth curve".

### Data
init = np.array([1, 1, 0.9, 1]) #[alpha, beta, gamma, tau]

X = np.array([1, 1.5, 1.5, 1.5, 2.5, 4, 5, 5, 7, 8, 8.5, 9, 9.5, 9.5, 10, 12, 12, 13, 13, 14.5, 15.5, 15.5, 16.5, 17, 22.5, 29, 31.5])
Y = np.array([1.8, 1.85, 1.87, 1.77, 2.02, 2.27, 2.15, 2.26, 2.47, 2.19, 2.26, 2.4, 2.39, 2.41, 2.5, 2.32, 2.32, 2.43, 2.47, 2.56, 2.65, 2.47, 2.64, 2.56, 2.7, 2.72, 2.57])

### Algorithme
propsd = [0.2, 0.8, 0.1, 10] #Paramètres pour les différentes marches aléatoires



def GibbsDugong(nchain, init, X, Y, propsd):
  #on initialise la chaîne
  chain=np.zeros((nchain+1,4))
  alpha=init[0]
  beta=init[1]
  gamma=init[2]
  tau=init[3]
  chain[0]=init

  for i in range (nchain):
    #alpha
    prop=alpha+propsd[0]*sp.stats.norm.rvs()
    mu=alpha-beta*gamma**X
    muprop=prop-beta*gamma**X
    if prop>0:#condition sur le paramètre à respecter
      ##top=((2*Y*muprop-muprop**2)/(2*tau)).sum()
      ##bottom=((2*Y*mu-mu**2)/(2*tau)).sum()
      top = np.sum(sp.stats.norm.logpdf(Y, muprop,1/ np.sqrt(tau)))
      bottom = np.sum(sp.stats.norm.logpdf(Y, mu, 1/np.sqrt(tau)))
      if np.exp(top-bottom)>np.random.uniform():
        alpha=prop
    #beta
    prop=beta+propsd[1]*sp.stats.norm.rvs()
    mu=alpha-beta*gamma**X
    muprop=alpha-prop*gamma**X
    if prop>0:#condition sur le paramètre à respecter
      top=((2*Y*muprop-muprop**2)/2*tau).sum()
      bottom=((2*Y*mu-mu**2)/2*tau).sum()
      if np.exp(top-bottom)>np.random.uniform():
        beta=prop
    #gamma
    prop=gamma+propsd[2]*sp.stats.norm.rvs()
    mu=alpha-beta*gamma**X
    muprop=alpha-beta*prop**X
    if (prop>0 and prop<1):#condition sur le paramètre à respecter
      top=((2*Y*muprop-muprop**2)/2*tau).sum()
      bottom=((2*Y*mu-mu**2)/2*tau).sum()
      if np.exp(top-bottom)>np.random.uniform():
        gamma=prop
    #tau
    prop=tau+propsd[3]*sp.stats.norm.rvs()
    mu=alpha-beta*gamma**X
    if (prop>0):#condition sur le paramètre à respecter
      top=(0.5*np.log(prop)-((Y-mu)**2)/2*prop).sum()
      bottom=(0.5*np.log(tau)-((Y-mu)**2)/2*tau).sum()
      if np.exp(top-bottom)>np.random.uniform():
        tau=prop
    chain[i+1]=[alpha, beta, gamma, tau]
  return(chain)


### Résultats et Prédiction

res = GibbsDugong(10000, init, X, Y, propsd)

alpha = res[100:,0]
beta = res[100:,1]
gamma = res[100:,2]
tau = res[100:,3]

X = np.array([x for x in range(0, 40)])
mu = np.array([np.mean(alpha) - np.mean(beta) * np.mean(gamma)**x for x in X])

Y = np.array([sp.stats.norm.rvs(loc = mu[i], scale = np.mean(sigma), size = 10000) for i in range(len(mu))])

plt.figure(figsize = (8, 4));
plt.plot(X, Y, color = 'lightgrey');
plt.plot(X, np.mean(Y, axis = 1), color = 'red');
plt.xlabel("Age (années)");
plt.ylabel("Taille (mètres)");
plt.title("Prédiction de la taille des dugongs en fonction de leur âge");
